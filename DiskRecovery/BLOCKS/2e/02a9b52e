ponent.
</li>

</ul>


<br>




<h2>Component description</h2>
<p>
Here we provide a listing and brief description of Terrier's components.
</p> 




<h3>Indexing</h3>
<table border="1" width="100%">
 <tbody>
 	<tr>
	 	<th width = "20%">
	 	<b>Name</b>
	 	</th>
	 	<th>
	 <b>	Description</b>
	 	</th>
 	</tr>
 	<tr>
	 	<td>
	 <b>	Collection</b>
	 	</td>
	 	<td>
	 	This component encapsulates the most fundamental concept to 
	  	indexing with Terrier - a Collection i.e. a set of documents.
	  	See <a href="javadoc/org/terrier/indexing/Collection.html">org.terrier.indexing.Collection</a>
	  	for more details.
	 	</td>
 	</tr>
 	<tr>
	 	<td>
	 <b>	Document</b>
	 	</td>
	 	<td>
	 	This component encapsulates the concept of a document. 
      	It is essentially an Iterator over terms in a document.
      	See <a href="javadoc/org/terrier/indexing/Document.html">org.terrier.indexing.Document</a>
      	for more details.
	 	</td>
 	</tr>
 	
 	<tr>
	 	<td>
	 <b>	Tokeniser</b>
	 	</td>
	 	<td>
	 	Used by Document objects to break sequences of text (e.g. sentences)
	 	into a stream of words to index. See <a href="javadoc/org/terrier/indexing/tokenisation/Tokeniser.html">org.terrier.indexing.tokenisation.Tokeniser</a>
	 	for more details.
	 	</td>
 	</tr>
 	
 	<tr>
	 	<td>
	 <b>	TermPipeline</b>
	 	</td>
	 	<td>
	 	Models the concept of a component in a pipeline of term processors. 
 		Classes that implement this interface could be stemming algorithms, 
		stopwords removers, or acronym expansion just to mention few examples.
		See <a href="javadoc/org/terrier/terms/TermPipeline.html">org.terrier.terms.TermPipeline</a>
		for more details.
	 	</td>
 	</tr>
 	<tr>
	 	<td>
	 <b>	Indexer</b>
	 	</td>
	 	<td>
	 	 The component responsible for managing the indexing process. It instantiates
      	 TermPipelines and Builders. 
      	 See <a href="javadoc/org/terrier/structures/indexing/Indexer.html">org.terrier.structures.indexing.Indexer </a>
      	 for more details.
	 	</td>
 	</tr>
 	<tr>
	 	<td>
	<b> 	Builders</b>
	 	</td>
	 	<td>
	 	Builders are responsible for writing an index to disk.
	 	See <a href="javadoc/org/terrier/structures/indexing/package-summary.html">org.terrier.structures.indexing package </a>
	 	for more details.
	 	</td>
 	</tr>
 	
  </tbody>
</table>


<h3>Data Structures</h3>

<table border="1" width="100%">
 <tbody>
 	<tr>
	 	<th width = "20%">
	 <b>	Name</b>
	 	</th>
	 	<th>
	 <b>	Description</b>
	 	</th>
 	</tr>
 	<tr>
	 	<td>
	 <b>	BitFile</b>
	 	</td>
	 	<td>
	 	A highly compressed I/O layer using gamma and unary encodings.
	 	See the org.terrier.compression packages
	 	for more details.
	 	</td>
 	</tr>
 	<tr>
	 	<td>
	 <b>Direct Index</b>
	 	</td>
	 	<td>
	 	The direct index stores the identifiers of terms that appear
		in each document and the corresponding frequencies. It is used for automatic
		query expansion, but can also be used for user profiling activities.
		See <a href="javadoc/org/terrier/structures/bit/DirectIndex.html">org.terrier.structures.bit.DirectIndex</a>
	 	for more details.
	 	</td>
 	</tr>
 	<tr>
	 	<td>
	 <b>Document Index</b>
	 	</td>
	 	<td>
		The document index stores information about each document for example the document length and identifier, and a
		pointer to the corresponding entry in the direct index.
		See <a href="javadoc/org/terrier/structures/DocumentIndex.html">org.terrier.structures.DocumentIndex</a>
	 	for more details.
 	 	</td>
 	</tr>
 	
 	<tr>
 		<td>
	 <b>	Inverted Index</b>
	 	</td>
	 	<td>
	 	The inverted index stores the posting lists, i.e. the identifiers of the
	 	documents and their corresponding term frequencies. Moreover it is 
	 	capable of storing the position of terms within a document.
	 	See <a href="javadoc/org/terrier/structures/bit/InvertedIndex.html">org.terrier.structures.bit.InvertedIndex</a>
	 	for more details.
	 	</td>
 	</tr>
 	<tr>
	 	<td>
	 <b>	Lexicon</b>
	 	</td>
	 	<td>
	 	The lexicon stores the collection vocabulary and the corresponding
	 	document and term frequencies.
	 	See <a href="javadoc/org/terrier/structures/Lexicon.html">org.t